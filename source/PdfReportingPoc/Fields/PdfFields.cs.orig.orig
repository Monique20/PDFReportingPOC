using System;
using Aspose.Pdf;
using Aspose.Pdf.Forms;
using System.IO;
using System.Linq;

namespace PdfReportingPoc.Fields
{
    public class PdfFields
    {
       
        public PdfFields()
        {
            var license = new License();
            license.SetLicense("Aspose.Pdf.Lic");
        }

        public PdfFieldsOperationsResponse MarkFieldsReadOnly(string[] fields, byte[] temp)
        {
<<<<<<< HEAD
            var results = new ResultBuilder();
<<<<<<< HEAD:source/PdfReportingPoc/Fields/PdfFields.cs.orig
=======
            var results = new PdfFieldsOperationsResponse();

>>>>>>> some refactoring to combine
=======

>>>>>>> Fields UseCase:source/PdfReportingPoc/Fields/PdfFields.cs
            var documentBytes = new byte[0];
            try
            {
            using (var incomingStream = new MemoryStream(temp))

            using (var incomingStream = new MemoryStream(temp))
            {
                var pdfDocument = new Document(incomingStream);
                foreach (var field in fields)
                {
                    bool fieldNotFound = FieldNotFound(pdfDocument, field);
                    if (fieldNotFound)
                        if (!invalidField)
                        {
                            results.Output = documentBytes;
                            results.ErrorMessage = "Field does not exist";
                            return results;
                        }
                    pdfDocument.Form[field].ReadOnly = true;
                }

                using (var documentStream = new MemoryStream())
                {
                    pdfDocument.Save(documentStream);
                    documentBytes = documentStream.ToArray();
                }
            }

            results.Output = documentBytes;
                     

            
                    }
                    DisableFields(fields, pdfDocument);
                    using (var documentStream = new MemoryStream())
                    {
                        pdfDocument.Save(documentStream);
                        documentBytes = documentStream.ToArray();
                    }
                }
                results.Output = documentBytes;
            }
            catch (Exception e)
            {
                results.ErrorMessage = e.Message;
            }
           
            return results;

        }

        private static bool FieldNotFound(Document pdfDocument, string field)
        {
            return !pdfDocument.Form.Any(x => x.FullName.Equals((field)));

        }

       
        

    }
}